git branch
source("~/edu/fullstack/eduardogenari/bicing/tests/eduardogenari/r1.R")
source("~/edu/fullstack/eduardogenari/bicing/tests/eduardogenari/r2.R")
source("~/edu/fullstack/eduardogenari/bicing/tests/eduardogenari/r3.R")
if (!requireNamespace("RPostgres", quietly = TRUE)) {
cat("RPostgres is not installed.\n")
} else {
cat("RPostgres is already installed.\n")
}
if (!requireNamespace("sf", quietly = TRUE)) {
cat("sf is not installed.\n")
} else {
cat("sf is already installed.\n")
}
if (!requireNamespace("DBI", quietly = TRUE)) {
cat("DBI is not installed.\n")
} else {
cat("DBI is already installed.\n")
}
if (!requireNamespace("dplyr", quietly = TRUE)) {
cat("dplyr is not installed.\n")
} else {
cat("dplyr is already installed.\n")
}
if (!requireNamespace("lubridate", quietly = TRUE)) {
cat("lubridate is not installed.\n")
} else {
cat("lubridate is already installed.\n")
}
install.packages("DBI")
install.packages("sf")
if (!requireNamespace("sf", quietly = TRUE)) {
cat("RPostgres is not installed.\n")
} else {
cat("RPostgres is already installed.\n")
}
if (!requireNamespace("DBI", quietly = TRUE)) {
cat("RPostgres is not installed.\n")
} else {
cat("RPostgres is already installed.\n")
}
install.packages("units")
install.packages("units")
install.packages("sf")
if (!requireNamespace("units", quietly = TRUE)) {
cat("NOT installed")
} else {
cat("installed")
}
install.packages("sf")
if (!requireNamespace("sf", quietly = TRUE)) {
cat("NOT installed")
} else {
cat("installed")
}
source("~/edu/fullstack/eduardogenari/bicing/descriptivo/Use_Daily.R")
source("~/edu/fullstack/eduardogenari/bicing/descriptive/univariate/stations/stations_data.R")
source("~/edu/fullstack/eduardogenari/bicing/descriptive/univariate/stations/stations_analysis.R")
source("~/edu/fullstack/eduardogenari/bicing/descriptive/univariate/stations/stations_analysis.R")
source("~/edu/fullstack/eduardogenari/bicing/descriptive/univariate/stations/stations_data.R")
source("~/edu/fullstack/eduardogenari/bicing/descriptive/univariate/stations/stations_analysis.R")
source("~/edu/fullstack/eduardogenari/bicing/descriptive/univariate/stations/stations_analysis.R")
source("~/edu/fullstack/eduardogenari/bicing/descriptive/univariate/stations/stations_analysis.R")
source("~/edu/fullstack/eduardogenari/bicing/descriptive/univariate/stations/stations_analysis.R")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(corrplot)
stations_data <- readRDS("stations_data.rds")
# Close the connection
dbDisconnect(con)
source("~/edu/fullstack/eduardogenari/bicing/descriptive/univariate/stations/stations_data.R")
source("~/edu/fullstack/eduardogenari/bicing/descriptive/univariate/stations/stations_analysis.R")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(corrplot)
stations_data <- readRDS("stations_data.rds")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(corrplot)
stations_data <- readRDS("stations_data.rds")
summary_data <- summary(stations_data)
print(summary_data)
numeric_columns <- sapply(stations_data, is.numeric)
boxplot(stations_data[, numeric_columns], main = "Boxplot of Numeric Columns")
for (col in names(stations_data)[numeric_columns]) {
ggplot(stations_data, aes_string(x = col)) +
geom_histogram(binwidth = 10, fill = "blue", color = "black") +
ggtitle(paste("Histogram of", col)) +
theme_minimal() +
ggsave(paste0("histogram_", col, ".png"))
}
for (col in names(stations_data)[numeric_columns]) {
p <- ggplot(stations_data, aes(x = .data[[col]])) +
geom_histogram(binwidth = 10, fill = "blue", color = "black") +
ggtitle(paste("Histogram of", col)) +
theme_minimal()
ggsave(paste0("histogram_", col, ".png"), plot = p)
}
summary_data <- summary(stations_data)
print(summary_data)
summary(stations_intervals_1)
?ggplot
View(data)
source("~/edu/fullstack/eduardogenari/bicing/descriptive/univariate/stations/stations_data.R")
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(dplyr)
stations_data <- readRDS("stations_data.rds")
stations_sf <- st_as_sf(stations_data, coords = c("lon", "lat"), crs = 4326)
hull <- st_convex_hull(st_union(stations_sf))
# Calculate area
area <- st_area(hull)
print(area)
hull <- st_convex_hull(st_union(stations_sf))
area_sq_m <- st_area(hull)
area_sq_km <- as.numeric(area_sq_m) / 1e6
print(area_sq_km)
total_surface_barcelona_km2 <- 101
percentage_occupied <- (area_sq_km / total_surface_barcelona_km2) * 100
print(percentage_occupied)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(dplyr)
library(geosphere)
install.packages("geosphere")
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(dplyr)
library(geosphere)
stations_data <- readRDS("stations_data.rds")
stations_sf <- st_as_sf(stations_data, coords = c("lon", "lat"), crs = 4326)
coords <- as.matrix(stations_data[, c("lon", "lat")])
dist_matrix <- distm(coords, fun = distHaversine)
avg_distance <- mean(dist_matrix[upper.tri(dist_matrix)])
print(avg_distance)
install.packages("leaflet")
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(dplyr)
library(leaflet)
stations_data <- readRDS("stations_data.rds")
stations_sf <- st_as_sf(stations_data, coords = c("lon", "lat"), crs = 4326)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = stations_sf,
radius = 3,
color = "red",
fill = TRUE,
fillColor = "red",
fillOpacity = 1)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(dplyr)
library(geosphere)
stations_data <- readRDS("stations_data.rds")
stations_sf <- st_as_sf(stations_data, coords = c("lon", "lat"), crs = 4326)
coords <- as.matrix(stations_data[, c("lon", "lat")])
dist_matrix <- distm(coords, fun = distHaversine)
# Find the nearest station for each station
nearest_distances <- apply(dist_matrix, 1, function(row) {
min(row[row > 0])  # Find the minimum distance greater than 0 (itself)
})
# Calculate the average of these nearest distances
avg_nearest_distance <- mean(nearest_distances)
print(avg_nearest_distance)
coords <- as.matrix(stations_data[, c("lon", "lat")])
dist_matrix <- distm(coords, fun = distHaversine)
# Set the diagonal to Inf to ignore self-distances
diag(dist_matrix) <- Inf
# Find the minimum distance and its indices
min_dist <- min(dist_matrix)
min_indices <- which(dist_matrix == min_dist, arr.ind = TRUE)
# Print the minimum distance and the corresponding station IDs
station1_id <- stations_data[min_indices[1, 1], "id"]
station2_id <- stations_data[min_indices[1, 2], "id"]
print(paste("Minimum distance:", min_dist, "meters"))
print(paste("Station 1 ID:", station1_id))
print(paste("Station 2 ID:", station2_id))
coords <- as.matrix(stations_data[, c("lon", "lat")])
dist_matrix <- distm(coords, fun = distHaversine)
# Set the diagonal to Inf to ignore self-distances
diag(dist_matrix) <- Inf
# Find the minimum distance and its indices
min_dist <- min(dist_matrix)
min_indices <- which(dist_matrix == min_dist, arr.ind = TRUE)
# Print the minimum distance and the corresponding station IDs
station1_id <- stations_data[min_indices[1, 1], "stationid"]
station2_id <- stations_data[min_indices[1, 2], "station_id"]
print(paste("Minimum distance:", min_dist, "meters"))
print(paste("Station 1 ID:", station1_id))
print(paste("Station 2 ID:", station2_id))
coords <- as.matrix(stations_data[, c("lon", "lat")])
dist_matrix <- distm(coords, fun = distHaversine)
# Set the diagonal to Inf to ignore self-distances
diag(dist_matrix) <- Inf
# Find the minimum distance and its indices
min_dist <- min(dist_matrix)
min_indices <- which(dist_matrix == min_dist, arr.ind = TRUE)
# Print the minimum distance and the corresponding station IDs
station1_id <- stations_data[min_indices[1, 1], "station_id"]
station2_id <- stations_data[min_indices[1, 2], "station_id"]
print(paste("Minimum distance:", min_dist, "meters"))
print(paste("Station 1 ID:", station1_id))
print(paste("Station 2 ID:", station2_id))
